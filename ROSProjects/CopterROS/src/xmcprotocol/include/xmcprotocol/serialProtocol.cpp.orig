#include "serialProtocol.h"

<<<<<<< HEAD
// Set ROS log level to DEBUG
//if( ros::console::set_logger_level(ROSCONSOLE_DEFAULT_NAME, ros::console::levels::Debug) ) {
    //ros::console::notifyLoggerLevelsChanged();
//}

=======
/*
 * Set ROS log level to DEBUG
 */
void setROSloglevel2Debug() {
    if( ros::console::set_logger_level(ROSCONSOLE_DEFAULT_NAME, ros::console::levels::Debug) ) {
        ros::console::notifyLoggerLevelsChanged();
    }
}

/*
 * Type casting
 */
// Convert int8_t array[4] to float32
float intToFloat(int8_t* ints, int s) {
    int8_t buffer[4] = {0};
    buffer[0] = ints[s];
    buffer[1] = ints[s+1];
    buffer[2] = ints[s+2];
    buffer[3] = ints[s+3];
    float ret = *(float*)&buffer;
    return ret;
}
// Convert uint8_t array[4] to float32
>>>>>>> bb429b4bf8771af1cce485065b6849363f21517e
float uintToFloat(uint8_t* uint, int s) {
    uint8_t buffer[4] = {0};
    buffer[0] = uint[s];
    buffer[1] = uint[s+1];
    buffer[2] = uint[s+2];
    buffer[3] = uint[s+3];
    float ret = *(float*)&buffer;
    return ret;
}
<<<<<<< HEAD
// Join two int8_t's to int16_t
int16_t int8216(uint8_t h, uint8_t l) {
    return (int16_t)((h<<8)+l);
}
=======
<<<<<<< HEAD
uint16_t uint8216(uint8_t h, uint8_t l) {
    return (uint16_t)((h<<8)+l);
}
=======
>>>>>>> 13fe63ddefa151248012f13a2f8326e1f7cf56c8
// Join two uint8_t's to uint16_t
uint16_t uint8216(uint8_t h, uint8_t l) {
    return (uint16_t)((h<<8)+l);
}
// Split uint16_t into two uint8_t's
>>>>>>> bb429b4bf8771af1cce485065b6849363f21517e
void uint1628(uint16_t ui, uint8_t* buf, uint8_t s) {
    buf[s] = (uint8_t)(ui>>8);
    buf[s+1] = (uint8_t)(ui&0xFF);
}
<<<<<<< HEAD
/*
template<typename T,int N>
void printBitrepresentation(T (&uintArray)[N]) {
    std::string outputBytes = "";
    std::string outputUints = "";
    for(int i=0;i<N;i++) {
        std::bitset<8> bitrep(uintArray[i]);
        outputBytes += bitrep.to_string() + " ";
        std::stringstream ss;
        ss << (unsigned int)uintArray[i];
        outputUints += ss.str() + ", ";
    }
    ROS_DEBUG("Message as bytes: %s",outputBytes.c_str());
    ROS_DEBUG("Message as uints: %s",outputUints.c_str());
}
template<typename T,int N>
void parseMessage(T (&msg)[N],float* ypr) {
    // if message is for me
    int start = 0;
    while(msg[start]!=255 && msg[start+1]!=242) {
	start++;
	if(start>=16) {
	    break;
	}
    }
    // Control checksum
    uint16_t csum = uint8216(msg[start+14],msg[start+15]);
    uint16_t sum = 0;
    for(int i=start;i<start+14;i++) {
        sum += (uint16_t)msg[i];
    }
    // If checksum correct parse pay load
    if(sum==csum) {
        ypr[0] = uintToFloat(msg,start+2);
        ypr[1] = uintToFloat(msg,start+6);
        ypr[2] = uintToFloat(msg,start+10);
        ROS_ERROR("yaw: %f, pitch: %f, roll: %f",ypr[0],ypr[1],ypr[2]);
    }else{
        ROS_ERROR("CHECKSUM ERROR: id = %i, start = %i, cs = % i, s = %i", (int)msg[start+1], start, (int)csum, (int)sum);
    }
}*/
=======

/*
 * Serial connection
 */
// Init odroid gpio serial with 8N1 at 115200 Baud
>>>>>>> bb429b4bf8771af1cce485065b6849363f21517e
int initSerial(void) {
    // Init serial
    int uart0_filestream = -1;
    // ODROID
    //uart0_filestream = open("/dev/ttyS2", O_RDWR | O_NOCTTY | O_NDELAY);
    // RPi 3
    uart0_filestream = open("/dev/serial0", O_RDWR | O_NOCTTY | O_NDELAY);
    if (uart0_filestream == -1) {
        ROS_ERROR("UART open() failed");
    }

    struct termios options;
    tcgetattr(uart0_filestream, &options);
    options.c_cflag = B460800 | CS8 | CLOCAL | CREAD;
    options.c_iflag = 0; //IGNPAR;
    options.c_oflag = 0;
    options.c_lflag = 0;
    tcflush(uart0_filestream, TCIFLUSH);
    tcsetattr(uart0_filestream, TCSANOW, &options);
    
    return uart0_filestream;
<<<<<<< HEAD
}
=======
}


/*
 * State Machine
 */
>>>>>>> bb429b4bf8771af1cce485065b6849363f21517e
